module = {}

local glyphs = {
    {' ', {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    {'"', {0x00,0x70,0x50,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    {'\'', {0x00,0x60,0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00}},
    {'(', {0x00,0x18,0x38,0x60,0x60,0x60,0x60,0x60,0x38,0x18,0x00}},
    {')', {0x00,0x18,0x1C,0x06,0x06,0x06,0x06,0x06,0x1C,0x18,0x00}},
    {'*', {0x00,0x00,0x08,0x2A,0x1C,0x3E,0x1C,0x2A,0x08,0x00,0x00}},
    {'+', {0x00,0x00,0x10,0x10,0x10,0xFE,0x10,0x10,0x10,0x00,0x00}},
    {',', {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x08,0x30,0x00,0x00}},
    {'-', {0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00}},
    {'.', {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}},
    {'/', {0x00,0x00,0x02,0x06,0x0C,0x18,0x30,0x60,0x40,0x00,0x00}},
    {'0', {0x00,0x18,0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00}},
    {'1', {0x00,0x08,0x18,0x38,0x18,0x18,0x18,0x18,0x3C,0x3C,0x00}},
    {'2', {0x00,0x3C,0x7E,0x66,0x06,0x3E,0x7C,0x60,0x7E,0x7E,0x00}},
    {'3', {0x00,0x7E,0x7E,0x06,0x0C,0x1C,0x06,0x66,0x7E,0x3C,0x00}},
    {'4', {0x00,0x6C,0x6C,0x6C,0x6C,0x7E,0x7E,0x0C,0x0C,0x0C,0x00}},
    {'5', {0x00,0x7E,0x7E,0x60,0x7C,0x7E,0x06,0x66,0x7E,0x3C,0x00}},
    {'6', {0x00,0x3C,0x7E,0x60,0x7C,0x7E,0x66,0x66,0x7E,0x3C,0x00}},
    {'7', {0x00,0x7E,0x7E,0x06,0x06,0x0C,0x18,0x30,0x30,0x30,0x00}},
    {'8', {0x00,0x3C,0x7E,0x66,0x7E,0x3C,0x66,0x66,0x7E,0x3C,0x00}},
    {'9', {0x00,0x3C,0x7E,0x66,0x66,0x7E,0x3E,0x06,0x3E,0x3C,0x00}},
    {'<', {0x00,0x06,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x06,0x00}},
    {'>', {0x00,0x60,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x60,0x00}},
    {':', {0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00,0x00}},
    {'A', {0x00,0x18,0x3C,0x7E,0x66,0x66,0x7E,0x7E,0x66,0x66,0x00}},
    {'B', {0x00,0x7C,0x7E,0x66,0x7C,0x7C,0x66,0x66,0x7E,0x7C,0x00}},
    {'C', {0x00,0x3C,0x7E,0x66,0x60,0x60,0x60,0x66,0x7E,0x3C,0x00}},
    {'D', {0x00,0x7c,0x3E,0x36,0x36,0x36,0x36,0x36,0x3E,0x7C,0x00}},
    {'E', {0x00,0x7E,0x7E,0x60,0x78,0x78,0x60,0x60,0x7E,0x7E,0x00}},
    {'F', {0x00,0x7E,0x7E,0x60,0x78,0x78,0x60,0x60,0x60,0x60,0x00}},
    {'G', {0x00,0x3C,0x7E,0x66,0x60,0x6E,0x6E,0x66,0x7E,0x3E,0x00}},
    {'H', {0x00,0x66,0x66,0x66,0x7E,0x7E,0x66,0x66,0x66,0x66,0x00}},
    {'I', {0x00,0x7E,0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x7E,0x00}},
    {'J', {0x00,0x7E,0x7E,0x18,0x18,0x18,0x18,0x58,0x78,0x38,0x00}},
    {'K', {0x00,0x66,0x66,0x6C,0x78,0x70,0x78,0x6C,0x66,0x66,0x00}},
    {'L', {0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7E,0x7E,0x00}},
    {'M', {0x00,0x42,0x66,0x7E,0x7E,0x66,0x66,0x66,0x66,0x66,0x00}},
    {'N', {0x00,0x46,0x66,0x76,0x76,0x6E,0x6E,0x66,0x66,0x62,0x00}},
    {'O', {0x00,0x3C,0x7E,0x66,0x66,0x66,0x66,0x66,0x7E,0x3C,0x00}},
    {'P', {0x00,0x7C,0x7E,0x66,0x66,0x7E,0x7C,0x60,0x60,0x60,0x00}},
    {'Q', {0x00,0x3C,0x7E,0x66,0x66,0x66,0x6E,0x7C,0x3C,0x06,0x00}},
    {'R', {0x00,0x7C,0x7E,0x66,0x66,0x7C,0x7C,0x6C,0x66,0x66,0x00}},
    {'S', {0x00,0x3C,0x7E,0x60,0x7C,0x3E,0x06,0x06,0x7E,0x3C,0x00}},
    {'T', {0x00,0x7E,0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00}},
    {'U', {0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x7E,0x3c,0x00}},
    {'V', {0x00,0x66,0x66,0x66,0x66,0x66,0x24,0x3C,0x3C,0x18,0x00}},
    {'W', {0x00,0x66,0x66,0x66,0x66,0x66,0x7E,0x7E,0x66,0x42,0x00}},
    {'X', {0x00,0x66,0x66,0x24,0x3C,0x18,0x3C,0x24,0x66,0x66,0x00}},
    {'Y', {0x00,0x66,0x66,0x24,0x3C,0x18,0x18,0x18,0x18,0x18,0x00}},
    {'Z', {0x00,0x7E,0x7E,0x06,0x0C,0x18,0x30,0x60,0x7E,0x7E,0x00}},
    {'^', {0x00,0x18,0x3C,0x7E,0x00,0x00,0x00,0x7E,0x3C,0x18,0x00}},
    {'_', {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00}},
    {'`', {0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x08,0x00,0x00,0x00}},
    {'a', {0x00,0x18,0x3C,0x7E,0x00,0x00,0x00,0x7E,0x3C,0x18,0x00}}, -- up/down rocker symbol
    {'o', {0x00,0x70,0x50,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}, -- degree symbol
}

local v_units = 11
local h_units = 8
local oratio = 0.9

local function draw_glyph(rctx, unit, patterns, offset, inverted)
    local length = unit * oratio
    local dpos = (unit - length) / 2
    for y, pattern in ipairs(patterns) do
        pattern = inverted and (~pattern & 0xff) or pattern
        for x = 1, 8 do
            if pattern & (128 >> (x - 1)) ~= 0 then
                rctx:fill_rectangle(offset + (x - 1) * unit + dpos, (y - 1) * unit + dpos, length, length)
            end
        end
    end
end

function module.generate_font(height, ocupancy_ratio, color)
    color = color or graphics.color(171, 205, 83)
    oratio = ocupancy_ratio or 0.9
    local font = {}
    font .unit = height / v_units
    font.height = height
    font.width = font.unit * h_units
    local bm_width = font.width * #glyphs
    local bm_height = font.height
    
    font.normal_bitmap = graphics.bitmap(bm_width, bm_height)
    font.inverted_bitmap = graphics.bitmap(bm_width, bm_height)
    font.font = graphics.bitmap_font()

    for _, ctx in pairs{{font.normal_bitmap, false, 0}, {font.inverted_bitmap, true, 128}} do
        local rctx = graphics.rendering_context(ctx[1])
        rctx.brush = color
        local offset = 0
        for _, def in ipairs(glyphs) do
            draw_glyph(rctx, font.unit, def[2], offset, ctx[2])
            offset = offset + font.width
        end
        rctx:finish_rendering()

        local offset = 0
        for _, def in ipairs(glyphs) do
            local glyph = ctx[1]:create_partial_bitmap(offset, 0, font.width, font.height)
            font.font:add_glyph(string.char(def[1]:byte() + ctx[3]), glyph)
            offset = offset + font.width
        end
    end

    font.codepoints = ''
    for _, def in ipairs(glyphs) do
        font.codepoints = font.codepoints .. def[1]
    end
    for _, def in ipairs(glyphs) do
        font.codepoints = font.codepoints .. string.char(def[1]:byte() + 128)
    end

    return font
end

return module
